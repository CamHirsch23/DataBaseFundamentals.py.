import sqlite3

# Connect to the database (or create it if it doesn't exist)
conn = sqlite3.connect('bookhaven.db')

# Create a cursor object using the cursor() method
cursor = conn.cursor()

# Create the Authors table
cursor.execute('''
CREATE TABLE IF NOT EXISTS Authors (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL
)
''')

# Create the Books table
cursor.execute('''
CREATE TABLE IF NOT EXISTS Books (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    author_id INTEGER NOT NULL,
    isbn TEXT UNIQUE NOT NULL,
    publication_date DATE NOT NULL,
    price REAL NOT NULL,
    available BOOLEAN NOT NULL DEFAULT 1,
    FOREIGN KEY (author_id) REFERENCES Authors(id) ON DELETE CASCADE
)
''')

# Create the Customers table
cursor.execute('''
CREATE TABLE IF NOT EXISTS Customers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    address TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL
)
''')

# Create the Transactions table
cursor.execute('''
CREATE TABLE IF NOT EXISTS Transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_id INTEGER NOT NULL,
    transaction_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    total_price REAL NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customers(id) ON DELETE CASCADE
)
''')

# Create the Books_Transactions junction table for the many-to-many relationship
cursor.execute('''
CREATE TABLE IF NOT EXISTS Books_Transactions (
    book_id INTEGER NOT NULL,
    transaction_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    PRIMARY KEY (book_id, transaction_id),
    FOREIGN KEY (book_id) REFERENCES Books(id) ON DELETE CASCADE,
    FOREIGN KEY (transaction_id) REFERENCES Transactions(id) ON DELETE CASCADE
)
''')

# Commit the changes
conn.commit()

# Close the connection
conn.close()

print("Database schema for 'BookHaven' has been created successfully.")
